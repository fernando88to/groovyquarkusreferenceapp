plugins {
    id 'java'
    id 'io.quarkus'
    id 'groovy'
    id 'jacoco'//para os testes que n達o v達o usar QuarkusTest
    id 'codenarc'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkiverse.groovy:quarkus-groovy:3.0.0'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-jacoco'
    implementation 'io.quarkiverse.groovy:quarkus-groovy-jaxb:3.0.0'
    implementation 'io.quarkiverse.groovy:quarkus-groovy-junit5:3.0.0'
    implementation 'io.quarkus:quarkus-arc'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group 'com.fernando'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

//para os testes que n達o v達o usar QuarkusTest
test {
    finalizedBy jacocoTestReport
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
        destinationFile = layout.buildDirectory.file("jacoco-quarkus.exec").get().asFile
    }
    jacocoTestReport.enabled = false
}


codenarc {
    toolVersion = '3.2.0'
    configFile = file("config/codenarc/codenarc.groovy")
    reportFormat = 'html'
    //ignoreFailures = true
    maxPriority1Violations = 10
    maxPriority2Violations = 20
    maxPriority3Violations = 100

}